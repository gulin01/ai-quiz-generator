generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Word {
  id        Int      @id @default(autoincrement())
  text      String   @unique
  cefr      CEFR
  frequency Int?
  createdAt DateTime @default(now())
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  level     CEFR
  theta     Float?
  createdAt DateTime @default(now())
}

model Quiz {
  id          Int      @id @default(autoincrement())
  question    String
  choices     Json
  answer      String
  matchingMap Json?
  explanation String?
  type        QuizType @default(MCQ)
  mode        QuizMode @default(TEXT_TO_TEXT)
  mediaUrl    String?
  metadata    Json?
  unitId      Int?
  createdAt   DateTime @default(now())
  unit        Unit?    @relation(fields: [unitId], references: [id], onDelete: Cascade)

  @@index([unitId], map: "Quiz_unitId_fkey")
}

model Section {
  id        Int      @id @default(autoincrement())
  title     String   @unique
  cefr      CEFR
  order     Int
  createdAt DateTime @default(now())
  unit      Unit[]
}

model Unit {
  id           Int               @id @default(autoincrement())
  sectionId    Int
  name         String?
  grammarPoint String
  order        Int
  createdAt    DateTime          @default(now())

  // Relations
  section      Section           @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  quizzes      Quiz[]
  vocabulary   VocabularyItem[]
  story        Story?            @relation("UnitStory")

  @@index([sectionId], map: "Unit_sectionId_fkey")
}

model Story {
  id        Int      @id @default(autoincrement())
  title     String
  content   String   @db.Text
  audioUrl  String?
  keywords  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Bind exactly one Story to one Unit
  unitId    Int?      @unique
  unit      Unit?     @relation("UnitStory", fields: [unitId], references: [id], onDelete: Cascade)

  @@index([unitId], map: "Story_unitId_fkey")
}
model VocabularyItem {
  id         Int     @id @default(autoincrement())
  word       String
  imageUrl   String?
  definition String?
  unitId     Int
  unit       Unit    @relation(fields: [unitId], references: [id], onDelete: Cascade)

  @@index([unitId], map: "VocabularyItem_unitId_fkey")
}

enum CEFR {
  A1
  A2
  B1
  B2
  C1
  C2
}

enum QuizType {
  MCQ
  GAP_FILL
  SENTENCE_ORDER
  MATCHING
}

enum QuizMode {
  TEXT_TO_TEXT
  TEXT_TO_IMAGE
  IMAGE_TO_TEXT
  AUDIO_TO_TEXT
  TEXT_TO_AUDIO
  DEFINITION_TO_IMAGE
  TEXT_INPUT
  IMAGE_INPUT
  AUDIO_INPUT
  WORD_ORDER
  SENTENCE_COMPLETION
  GAP_FILL
  MATCH_TEXT_TEXT
  MATCH_TEXT_IMAGE
  MATCH_IMAGE_IMAGE
  SPEAK_WORD
  SPEAK_SENTENCE
  STORY_COMPREHENSION
  REORDER_SENTENCES
}
